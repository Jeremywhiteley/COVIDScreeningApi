<Project>

  <PropertyGroup>
    <!-- variable to persist if the customer has custom tools already -->
    <ToolManifestExists>false</ToolManifestExists>
    <!--
      The docs reflect "v1" so most customers getting started with 
      Swashbuckle use "v1" as their "document name" and their version.

      Swashbuckle will soon update the middlware to stop requiring the 
      OpenApiInfo parameter, and will default the document name and version
      to "v1." 

      Customers will *always* be able to change this, so if possible, 
      we should interrogate the Startup.cs file. A sample from a 
      Startup.cs is below, with the value we'd need to pass into 
      DefaultSwaggerDocName highlighted.

      services.AddSwaggerGen(config =>
      {
          config.SwaggerDoc("v1", // THIS PARAMETER SHOULD BE USED AS THE DefaultSwaggerDocName VALUE
          new OpenApiInfo
          {
              Title = "COVIDScreeningApi",
              Version = "v1"
          });
      });

      For now we've given them an escape hatch in the form of the OpenApiDocumentName
      property. In this project, the OpenApiDocumentName is used in the .csproj file 
      to define the Open API doc's doc name. This way, a customer can change the value we 
      pass to the Swashbuckle CLI. 

      In the case where they don't do this, we have a target in this file that informs
      the customer what to do.
    -->
    <DefaultSwaggerDocName>v1</DefaultSwaggerDocName>
    <OpenApiDocumentName>v1</OpenApiDocumentName>
  </PropertyGroup>

  <!-- ascertain if the customer already has any custom tools -->
  <Target Name="CheckForManifestFile" AfterTargets="Build">
    <CreateProperty Value="true" Condition="Exists('.config/dotnet-tools.json')">
      <Output TaskParameter="Value" PropertyName="ToolManifestExists"/>
    </CreateProperty>
  </Target>
  
  <!-- adds the Swashbuckle CLI so we can use it to build the Swagger file -->
  <Target Name="InstallSwashbuckleCli" AfterTargets="CheckForManifestFile">
    <!-- create the tool manifest if it doesn't exist already -->
    <Exec Command="dotnet new tool-manifest &gt; swagger-log.txt" Condition="!$(ToolManifestExists)"/>
    <!-- install the tool into the project tool manifest -->
    <Exec Command="dotnet tool install Swashbuckle.AspNetCore.Cli"/>
  </Target>

  <!-- creates the swagger file -->
  <Target Name="CreateSwaggerFile" 
          AfterTargets="InstallSwashbuckleCli">
    <!-- create the swagger file -->
    <Exec Command="dotnet swagger tofile --serializeasv2 --output $(OutputPath)swagger.json $(OutputPath)/$(MSBuildProjectName).dll $(DefaultSwaggerDocName)"
          Condition="'$(DefaultSwaggerDocName)' == '$(OpenApiDocumentName)'" />
    <Exec Command="dotnet swagger tofile --serializeasv2 --output $(OutputPath)swagger.json $(OutputPath)/$(MSBuildProjectName).dll $(OpenApiDocumentName)"
          Condition="'$(DefaultSwaggerDocName)' != '$(OpenApiDocumentName)'" />
    <OnError ExecuteTargets="InformCustomerHowToOverrideSwaggerDocName"/>
  </Target>

  <!-- 
    In the case that the customer isn't using "v1" as the Open API doc, 
    we need to tell them how to mitigate it. 
   -->
  <Target Name="InformCustomerHowToOverrideSwaggerDocName">
    <Message Importance="High" 
             Text="Tell the customers how to unbreak themselves here by setting the 'OpenApiDocumentName' property in their .csproj file to override the default."/>
    <CallTarget Targets="CleanUpAfterSwaggerGeneration"/>
  </Target>

  <!-- cleanup the Swashbuckle CLI dependencies -->
  <Target Name="CleanUpAfterSwaggerGeneration" AfterTargets="CreateSwaggerFile">
    <!-- uninstall the Swashbuckle CLI, as it is no longer needed -->
    <Exec Command="dotnet tool uninstall Swashbuckle.AspNetCore.Cli" />
    <!-- remove the tool manifest if we created it -->
    <RemoveDir Directories=".config" Condition="!$(ToolManifestExists)"/>
  </Target>

</Project>